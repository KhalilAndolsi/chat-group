useEffect(() => {
  const channel = pusherClient.subscribe(room);

  channel.bind("on-send-message", (data) => {
    setMessages((prev) => [...prev, data.message]);
  });

  return () => {
    pusherClient.unsubscribe(room);
  };
}, [room]);

-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

import Pusher from "pusher-js";

const pusherClient = new Pusher(process.env.NEXT_PUBLIC_PUSHER_KEY, {
  cluster: process.env.NEXT_PUBLIC_PUSHER_CLUSTER,
});

export default pusherClient;

-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

const pusher = new Pusher({
  appId: process.env.NEXT_PUBLIC_PUSHER_APP_ID,
  key: process.env.NEXT_PUBLIC_PUSHER_KEY,
  secret: process.env.NEXT_PUBLIC_PUSHER_SECRET,
  cluster: process.env.NEXT_PUBLIC_PUSHER_CLUSTER,
  useTLS: true,
});

-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------

await pusher.trigger(room, "on-send-message", { message });